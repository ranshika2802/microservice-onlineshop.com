networks:
  online-shop-network:
    driver: bridge
services:
#  collector:
#    container_name: collector
#    image: otel/opentelemetry-collector-contrib:0.91.0
#    command:
#      - --config=/etc/otelcol-contrib/otel-collector.yml
#    volumes:
#      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
#    restart: always
#    ports:
#      - "4317" # OTLP gRPC receiver
#      - "8889" # Prometheus exporter metrics
#    depends_on:
#      - loki
#      - jaeger-all-in-one
#      - zipkin-all-in-one
#      - tempo
#
#  tempo:
#    container_name: tempo
#    image: grafana/tempo:latest
#    command: [ "-config.file=/etc/tempo.yml" ]
#    volumes:
#      - ./docker/tempo/tempo.yml:/etc/tempo.yml
#    restart: always
#    ports:
#      - "4317"  # otlp grpc
#      - "3200"  # tempo as grafana datasource
#
#  loki:
#    container_name: loki
#    image: grafana/loki:latest
#    command: -config.file=/etc/loki/local-config.yaml
#    restart: always
#    ports:
#      - "3100"
#
#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus
#    volumes:
#      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    command:
#      - --config.file=/etc/prometheus/prometheus.yml
#      - --enable-feature=exemplar-storage
#      - --web.enable-remote-write-receiver
#    restart: always
#    ports:
#      - '9090:9090'
#    depends_on:
#      - collector
#
#  grafana:
#    container_name: grafana
#    image: grafana/grafana
#    volumes:
#      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
#    restart: always
#    ports:
#      - "3000:3000"
#    depends_on:
#      - prometheus
#      - loki
#      - jaeger-all-in-one
#      - zipkin-all-in-one
#      - tempo
#
#  jaeger-all-in-one:
#    container_name: jaeger
#    image: jaegertracing/all-in-one:latest
#    environment:
#      - COLLECTOR_OTLP_ENABLED=true
#    restart: always
#    ports:
#      - "16686:16686"
#      - "4317"
#
#  zipkin-all-in-one:
#    container_name: zipkin
#      image: openzipkin/zipkin:latest
#      restart: always
#      ports:
#        - "9411:9411"
  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command:
      - --config.file=/etc/tempo.yml
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yml
    ports:
      - "3200:3200"   # tempo
      - "4317"  # otlp grpc
    networks:
      - online-shop-network
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.82.0
    environment:
      - OTEL_TRACES_EXPORTER=otlp
      - OTEL_LOGS_EXPORTER=loki
    restart: always
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - ./docker/collector/otel-collector.yml:/etc/otelcol-contrib/otel-collector.yml
    ports:
      - "1888:1888" # pprof extension
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - tempo
      - jaeger-all-in-one
      - zipkin-all-in-one
    networks:
      - online-shop-network
  loki:
    container_name: loki
    image: grafana/loki:latest
    command:
      - --config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - online-shop-network
    healthcheck:
      test: [ "CMD", "sh", "-c", "exec 3<>/dev/tcp/localhost/3100/ready && echo 1 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 7
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - online-shop-network
  # Zipkin - for tracing actions and seeing how each service talks to others
#  zipkin:
#    container_name: zipkin
#    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
#    extra_hosts: ['host.docker.internal:host-gateway']
#    command:
#      - '--logging.level.zipkin2=DEBUG'
#      - '--config.file=/etc/zipkin.yaml'
#    volumes:
#      - ./docker/zipkin/zipkin.yml:/etc/zipkin.yaml:ro
#      - ./docker/zipkin/zipkin-data:/tmp/zipkin
#    environment:
#      - STORAGE_TYPE=mem
#      - SELF_TRACING_ENABLED=true
#      - JAVA_OPTS=-Xms128m -Xmx128m -XX:+ExitOnOutOfMemoryError
#      - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG
#    ports:
#      - "9411:9411"
#    networks:
#      - online-shop-network
  grafana:
    container_name: grafana
    image: grafana/grafana
    volumes:
      - ./docker/grafana/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    networks:
      - online-shop-network
  jaeger-all-in-one:
    container_name: jaeger-all-in-one
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
    networks:
      - online-shop-network
  zipkin-all-in-one:
    container_name: zipkin-all-in-one
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
    networks:
      - online-shop-network
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    networks:
      - online-shop-network

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.0.1
    command:
      - "start-dev"
      - "--import-realm"
    environment:
      TZ: Asia/Kolkata  # Added timezone configuration
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8085:8080"
    volumes:
      - ./docker/keycloak/realm/:/opt/keycloak/data/import/
      - ./online-shop-realm.json:/opt/keycloak/data/import/online-shop-realm.json
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    depends_on:
      - keycloak-mysql
    networks:
      - online-shop-network
    healthcheck:
      test: [ "CMD", "sh", "-c", "exec 3<>/dev/tcp/localhost/8080 && echo 1 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 7

  # Eureka - lets services find each other -> Spring boot eureka server image
  eureka:
    image: steeltoeoss/eureka-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - online-shop-network

  # API Gateway - handles incoming requests and routes them
  api-gateway:
    image: api-gateway:0.0.2  # Replace with the actual image name
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - KEYCLOAK_AUTH_SERVER_URL=http://keycloak:8080/auth
    depends_on:
      keycloak:
        condition: service_healthy
    networks:
      - online-shop-network

  # Admin Service
  admin-service:
    image: admin-service:0.0.1  # Replace with the actual image name
    container_name: admin-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
    networks:
      - online-shop-network
  # Customer Service
  customer-service:
    image: customer-service:0.0.1
    container_name: customer-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - REDIS_HOST=redis
    networks:
      - online-shop-network
  #      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customerdb

  # Product Service
  product-service:
    image: product-service:0.0.1
    container_name: product-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://junction.proxy.rlwy.net:32362/railway
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=FIvaNkrWMKzmYFURzcnlxYxzhtWhWKhe
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
    networks:
      - online-shop-network
  # Inventory Service
  inventory-service:
    image: inventory-service:0.0.1
    container_name: inventory-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://junction.proxy.rlwy.net:32362/railway
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=FIvaNkrWMKzmYFURzcnlxYxzhtWhWKhe
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
    networks:
      - online-shop-network
  # Price Service
  price-service:
    image: price-service:0.0.1
    container_name: price-service
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_DATASOURCE_URL=jdbc:postgresql://junction.proxy.rlwy.net:32362/railway
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=FIvaNkrWMKzmYFURzcnlxYxzhtWhWKhe
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
    networks:
      - online-shop-network


  # Redis - a cache storage
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - online-shop-network

volumes:
  grafana-storage:

  # PostgreSQL Database
#  postgres:
#    image: postgres
#    container_name: postgres
#    environment:
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=password
#      - POSTGRES_DB=maindb
#    ports:
#      - "5432:5432"